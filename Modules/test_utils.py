import itertools as it

import numpy as np
import pandas as pd
import pytest
from Modules import utils
from scipy.stats import pearsonr


class TestSlicerOnAxis:
    def test_examples(self):
        arr = np.arange(24).reshape(2, 3, 4)
        # simple slicer
        assert np.all(
            arr[utils.slicer_on_axis(arr, slice(1, 3), axis=-1)]
            == np.array([[[1, 2], [5, 6], [9, 10]], [[13, 14], [17, 18], [21, 22]]])
        )
        # unknown axis parameter
        for axis, res in enumerate([arr[1:], arr[:, 1:], arr[:, :, 1:]]):
            assert np.all(
                arr[utils.slicer_on_axis(arr, slice(1, None), axis=axis)] == res
            )
        # no axis parameter
        assert np.all(
            arr[utils.slicer_on_axis(arr, slice(None, -1))]
            == np.array([[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]])
        )
        # multiple slices and axis
        assert np.all(
            arr[utils.slicer_on_axis(arr, [slice(None, -1), slice(1, 3)], axis=[0, 2])]
            == np.array([[[1, 2], [5, 6], [9, 10]]])
        )
        # multiple slices without axis parameter
        assert np.all(
            arr[utils.slicer_on_axis(arr, [slice(None, -1), slice(1, 3)])]
            == np.array([[[4, 5, 6, 7], [8, 9, 10, 11]]])
        )
        # single slice on multiple axis
        assert np.all(
            arr[utils.slicer_on_axis(arr, slice(1, None), axis=[1, 2])]
            == np.array([[[5, 6, 7], [9, 10, 11]], [[17, 18, 19], [21, 22, 23]]])
        )

    def test_exceptions(self):
        arr = np.arange(24).reshape(2, 3, 4)
        with pytest.raises(IndexError):
            # axis out of bounds
            utils.slicer_on_axis(arr, slice(1, -1), axis=4)
            utils.slicer_on_axis(arr, slice(1, -1), axis=-4)
        with pytest.raises(ValueError):
            # iterable slice, integer axis
            utils.slicer_on_axis(arr, [slice(1, -1)], axis=1)
            # different number of slices and axis
            utils.slicer_on_axis(arr, [slice(1, -1), slice(2, 3)], axis=[1, 0, 2])
            utils.slicer_on_axis(arr, [slice(1, -1), slice(2, 3)], axis=[1])
            # multiple references to same axis
            utils.slicer_on_axis(arr, [slice(1, -1), slice(2, 3)], axis=[1, 1])
            utils.slicer_on_axis(arr, [slice(1, -1), slice(2, 3)], axis=[1, -2])


class TestMovingSum:
    tokens = np.array([0, 3, 1, 0, 3, 3, 3, 3, 1, 3])
    one_hot = np.array(
        [
            [1, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 1, 0, 0],
            [1, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 0, 0, 1],
            [0, 0, 0, 1],
            [0, 0, 0, 1],
            [0, 1, 0, 0],
            [0, 0, 0, 1],
        ],
        dtype=int,
    )

    def test_examples(self):
        assert np.all(
            utils.moving_sum(np.arange(10), n=2)
            == np.array([1, 3, 5, 7, 9, 11, 13, 15, 17])
        )
        arr = np.arange(24).reshape(2, 3, 4)
        assert np.all(
            utils.moving_sum(arr, n=2, axis=-1)
            == np.array(
                [
                    [[1, 3, 5], [9, 11, 13], [17, 19, 21]],
                    [[25, 27, 29], [33, 35, 37], [41, 43, 45]],
                ]
            )
        )

    def test_1D(self):
        refs = [
            np.array(
                [
                    [1, 0, 0, 0],
                    [0, 0, 0, 1],
                    [0, 1, 0, 0],
                    [1, 0, 0, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 1, 0, 0],
                    [0, 0, 0, 1],
                ]
            ),
            np.array(
                [
                    [1, 0, 0, 1],
                    [0, 1, 0, 1],
                    [1, 1, 0, 0],
                    [1, 0, 0, 1],
                    [0, 0, 0, 2],
                    [0, 0, 0, 2],
                    [0, 0, 0, 2],
                    [0, 1, 0, 1],
                    [0, 1, 0, 1],
                ]
            ),
            np.array(
                [
                    [1, 1, 0, 1],
                    [1, 1, 0, 1],
                    [1, 1, 0, 1],
                    [1, 0, 0, 2],
                    [0, 0, 0, 3],
                    [0, 0, 0, 3],
                    [0, 1, 0, 2],
                    [0, 1, 0, 2],
                ]
            ),
            np.array([[2, 2, 0, 6]]),
        ]
        for n, ref in zip([1, 2, 3, 10], refs):
            assert np.all(
                utils.moving_sum(self.one_hot[:, 0], n) == ref[:, 0]
            )  # default on 1D
            for axis in [None, 0, -1]:
                assert np.all(
                    utils.moving_sum(self.one_hot[:, 0], n, axis=axis) == ref[:, 0]
                )  # all axis values on 1D
            assert np.all(
                utils.moving_sum(self.one_hot, n, axis=0) == ref
            )  # axis=0 on 2D

    def test_2D(self):
        refs = [
            np.array(
                [
                    [1, 0, 0, 0],
                    [0, 0, 0, 1],
                    [0, 1, 0, 0],
                    [1, 0, 0, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 1, 0, 0],
                    [0, 0, 0, 1],
                ]
            ),
            np.array(
                [
                    [1, 0, 0],
                    [0, 0, 1],
                    [1, 1, 0],
                    [1, 0, 0],
                    [0, 0, 1],
                    [0, 0, 1],
                    [0, 0, 1],
                    [0, 0, 1],
                    [1, 1, 0],
                    [0, 0, 1],
                ]
            ),
            np.array(
                [
                    [1, 0],
                    [0, 1],
                    [1, 1],
                    [1, 0],
                    [0, 1],
                    [0, 1],
                    [0, 1],
                    [0, 1],
                    [1, 1],
                    [0, 1],
                ]
            ),
            np.array([[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]),
        ]
        for n, ref in zip(range(1, 5), refs):
            assert np.all(
                utils.moving_sum(self.one_hot, n, axis=-1) == ref
            )  # axis=-1 on 2D

    def test_flattened(self):
        refs = [
            np.array(
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                ]
            ),
            np.array(
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                ]
            ),
            np.array(
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    0,
                    1,
                    1,
                    1,
                    0,
                    1,
                    1,
                    1,
                    0,
                    1,
                    1,
                    2,
                    1,
                    1,
                    0,
                    0,
                    0,
                    1,
                ]
            ),
            np.array([10]),
        ]
        for n, ref in zip([1, 2, 3, 40], refs):
            assert np.all(utils.moving_sum(self.one_hot, n) == ref)  # axis=None on 2D

    def test_exceptions(self):
        with pytest.raises(ValueError):
            utils.moving_sum(self.one_hot[:, 0], 11)
            utils.moving_sum(self.one_hot, 5, axis=-1)
            utils.moving_sum(self.one_hot, 41)


class TestKmerCounts:
    orders = ["ACGT", "ATCG"]
    # All possible bases including N in different quantities
    one_hot1 = np.array(
        [[1, 0, 0, 0]]
        + [[0, 1, 0, 0]] * 2
        + [[0, 0, 1, 0]] * 3
        + [[0, 0, 0, 1]] * 4
        + [[0, 0, 0, 0]] * 5
    )
    # All possible bases except N in different quantities
    one_hot2 = np.array(
        [[1, 0, 0, 0]] + [[0, 1, 0, 0]] * 2 + [[0, 0, 1, 0]] * 3 + [[0, 0, 0, 1]] * 4
    )
    # Shuffled version of one_hot1, starting with N
    one_hot3 = np.array(
        [
            [0, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
            [1, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1],
            [0, 0, 0, 1],
            [0, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1],
        ]
    )
    # Shuffled version of one_hot2
    one_hot4 = np.array(
        [
            [0, 0, 1, 0],
            [0, 0, 0, 1],
            [0, 0, 0, 1],
            [0, 0, 0, 1],
            [0, 0, 1, 0],
            [0, 0, 1, 0],
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 1],
        ]
    )
    # No 2mer without N
    one_hot5 = np.array(
        [
            [0, 0, 1, 0],
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 0],
            [1, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ]
    )
    one_hots = [one_hot1, one_hot2, one_hot3, one_hot4, one_hot5]
    one_hots_dict = {i: one_hot for i, one_hot in enumerate(one_hots)}

    def test_k1_includeN(self):
        k = 1
        includeN = True
        for order in self.orders:
            ref1 = pd.Series(
                np.arange(1, 6), index=pd.MultiIndex.from_product([list(order + "N")])
            ).sort_index()
            ref2 = pd.Series(
                [i for i in range(1, 5)] + [0],
                index=pd.MultiIndex.from_product([list(order + "N")]),
            ).sort_index()
            ref3 = ref1
            ref4 = ref2
            ref5 = pd.Series(
                [1] * 4 + [6], index=pd.MultiIndex.from_product([list(order + "N")])
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(one_hot, k=k, includeN=includeN, order=order)
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        [one_hot], k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        {"foo": one_hot}, k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        one_hot.reshape(-1, 5, 4), k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref = pd.Series(
                [5, 9, 13, 17, 16],
                index=pd.MultiIndex.from_product([list(order + "N")]),
            ).sort_index()
            for fast in [True, False]:
                r = utils.kmer_counts(
                    self.one_hots, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)
                r = utils.kmer_counts(
                    self.one_hots_dict, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)

    def test_k1_excludeN(self):
        k = 1
        includeN = False
        for order in self.orders:
            ref1 = pd.Series(
                np.arange(1, 5), index=pd.MultiIndex.from_product([list(order)])
            ).sort_index()
            ref2 = ref1
            ref3 = ref1
            ref4 = ref1
            ref5 = pd.Series(
                [1] * 4, index=pd.MultiIndex.from_product([list(order)])
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(one_hot, k=k, includeN=includeN, order=order)
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        [one_hot], k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        {"foo": one_hot}, k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        one_hot.reshape(-1, 5, 4), k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref = pd.Series(
                [5, 9, 13, 17], index=pd.MultiIndex.from_product([list(order)])
            ).sort_index()
            for fast in [True, False]:
                r = utils.kmer_counts(
                    self.one_hots, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)
                r = utils.kmer_counts(
                    self.one_hots_dict, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)

    def test_k2_includeN(self):
        k = 2
        includeN = True
        for order in self.orders:
            ref1 = pd.Series(
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    0,
                    0,
                    3,
                    1,
                    0,
                    0,
                    0,
                    0,
                    4,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref2 = pd.Series(
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref3 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    2,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    1,
                    2,
                    1,
                    1,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref4 = pd.Series(
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    1,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref5 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    0,
                    1,
                    2,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(one_hot, k=k, includeN=includeN, order=order)
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        [one_hot], k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        {"foo": one_hot}, k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref1 = pd.Series(
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref2 = pd.Series(
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref3 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    2,
                    1,
                    1,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref4 = pd.Series(
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            ref5 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    0,
                    1,
                    2,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(
                        one_hot.reshape(-1, 5, 4), k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref = pd.Series(
                [
                    0,
                    3,
                    0,
                    0,
                    2,
                    0,
                    3,
                    3,
                    1,
                    2,
                    1,
                    0,
                    6,
                    5,
                    1,
                    0,
                    0,
                    1,
                    9,
                    4,
                    2,
                    3,
                    1,
                    2,
                    6,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 2),
            ).sort_index()
            for fast in [True, False]:
                r = utils.kmer_counts(
                    self.one_hots, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)
                r = utils.kmer_counts(
                    self.one_hots_dict, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)

    def test_k2_excludeN(self):
        k = 2
        includeN = False
        for order in self.orders:
            ref1 = pd.Series(
                [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 0, 0, 0, 3],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            ref2 = ref1
            ref3 = pd.Series(
                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 1],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            ref4 = pd.Series(
                [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 2],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            ref5 = pd.Series(
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(one_hot, k=k, includeN=includeN, order=order)
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        [one_hot], k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        {"foo": one_hot}, k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref1 = pd.Series(
                [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 3],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            ref2 = ref1
            ref3 = pd.Series(
                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            ref4 = pd.Series(
                [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 2],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            ref5 = pd.Series(
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(
                        one_hot.reshape(-1, 5, 4), k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref = pd.Series(
                [0, 3, 0, 0, 0, 3, 3, 1, 1, 0, 6, 5, 0, 0, 1, 9],
                index=pd.MultiIndex.from_product([list(order)] * 2),
            ).sort_index()
            for fast in [True, False]:
                r = utils.kmer_counts(
                    self.one_hots, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)
                r = utils.kmer_counts(
                    self.one_hots_dict, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)

    def test_k3_includeN(self):
        k = 3
        includeN = True
        for order in self.orders:
            ref1 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref2 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref3 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref4 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref5 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(one_hot, k=k, includeN=includeN, order=order)
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        [one_hot], k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        {"foo": one_hot}, k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref1 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref2 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref3 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref4 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            ref5 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(
                        one_hot.reshape(-1, 5, 4), k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    2,
                    3,
                    0,
                    0,
                    0,
                    0,
                    4,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    5,
                    2,
                    0,
                    1,
                    1,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    1,
                    0,
                    2,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    4,
                ],
                index=pd.MultiIndex.from_product([list(order + "N")] * 3),
            ).sort_index()
            for fast in [True, False]:
                r = utils.kmer_counts(
                    self.one_hots, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)
                r = utils.kmer_counts(
                    self.one_hots_dict, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)

    def test_k3_excludeN(self):
        k = 3
        includeN = False
        for order in self.orders:
            ref1 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            ref2 = ref1
            ref3 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            ref4 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    1,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            ref5 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(one_hot, k=k, includeN=includeN, order=order)
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        [one_hot], k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
                    r = utils.kmer_counts(
                        {"foo": one_hot}, k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref1 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            ref2 = ref1
            ref3 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            ref4 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            ref5 = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            refs = [ref1, ref2, ref3, ref4, ref5]
            for fast in [True, False]:
                for one_hot, ref in zip(self.one_hots, refs):
                    r = utils.kmer_counts(
                        one_hot.reshape(-1, 5, 4), k=k, includeN=includeN, order=order
                    )
                    assert np.all(r == ref)
            ref = pd.Series(
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    2,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    2,
                    3,
                    0,
                    0,
                    0,
                    4,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1,
                    5,
                ],
                index=pd.MultiIndex.from_product([list(order)] * 3),
            ).sort_index()
            for fast in [True, False]:
                r = utils.kmer_counts(
                    self.one_hots, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)
                r = utils.kmer_counts(
                    self.one_hots_dict, k=k, includeN=includeN, order=order
                )
                assert np.all(r == ref)

    def test_kmer_counts_by_seq_vs_sliding_kmer_counts(self):
        for k, includeN, order, one_hot, winsize in it.product(
            range(1, 4), [True, False], self.orders, self.one_hots, range(1, 6)
        ):
            if winsize < k:
                continue
            else:
                assert np.all(
                    utils.kmer_counts_by_seq(
                        utils.sliding_window_view(one_hot, (winsize, 4)).squeeze(
                            axis=1
                        ),
                        k,
                        order=order,
                        includeN=includeN,
                    )
                    == utils.sliding_kmer_counts(
                        one_hot, k, winsize, order=order, includeN=includeN
                    )
                )


def test_random_sequences():
    for name, freqs in {
        "uniform1": [0.25] * 4,
        "gc0.4": [0.3, 0.2, 0.2, 0.3],
        "asymetric": [0.1, 0.2, 0.3, 0.4],
        "gc0": [1, 0, 0, 1],
        "onlyA": [1, 0, 0, 0],
        "uniform2": [1 / 16] * 16,
        "repAC": [0, 0.5, 0, 0, 0.5] + [0] * 11,
        "uniform3": [1 / 64] * 64,
        "W303": [
            0.03914079,
            0.01806671,
            0.02171312,
            0.02912241,
            0.01727314,
            0.01168498,
            0.00881017,
            0.0151723,
            0.02033387,
            0.01151149,
            0.01152215,
            0.0152298,
            0.02422916,
            0.01765475,
            0.01833299,
            0.02905498,
            0.0231724,
            0.01080235,
            0.0126722,
            0.01835609,
            0.01501557,
            0.00676342,
            0.00583086,
            0.01134614,
            0.00920342,
            0.0056429,
            0.00580849,
            0.00877056,
            0.0128587,
            0.01117542,
            0.01262047,
            0.02148978,
            0.02385226,
            0.00980992,
            0.01129572,
            0.01761213,
            0.01250498,
            0.00784255,
            0.00565144,
            0.01149881,
            0.01278826,
            0.00787623,
            0.00674447,
            0.01157705,
            0.01428138,
            0.00972168,
            0.01079877,
            0.01799342,
            0.0218779,
            0.01426129,
            0.01291661,
            0.02418133,
            0.02020845,
            0.0126648,
            0.00913274,
            0.02012728,
            0.02024424,
            0.01246724,
            0.01491212,
            0.01721816,
            0.02186806,
            0.02358085,
            0.02308976,
            0.03901854,
        ],
    }.items():
        k = int(np.log(len(freqs)) / np.log(4))
        if k == 1:
            for freq_kmer in [
                pd.Series(
                    freqs / np.sum(freqs),
                    index=pd.MultiIndex.from_product([list("ACGT")]),
                ),
                pd.Series(freqs / np.sum(freqs), index=list("ACGT")),
            ]:
                for n_seqs in [1, 2]:
                    for length in [k, 10]:
                        for out in ["seq", "idx", "one_hot"]:
                            res = utils.random_sequences(
                                n_seqs, length, freq_kmer, out=out
                            )
                            if out == "one_hot":
                                assert res.shape == (n_seqs, length, 4)
                                assert res.dtype == bool
                            elif out == "seq":
                                assert res.shape == (n_seqs, length)
                                assert res.dtype == "<U1"
                            else:
                                assert res.shape == (n_seqs, length)
                                assert res.dtype == np.int8
                                if name == "gc0":
                                    assert np.all((res == 0) | (res == 3))
                                if name == "onlyA":
                                    assert np.all(res == 0)

        else:
            freq_kmer = pd.Series(
                freqs / np.sum(freqs),
                index=pd.MultiIndex.from_product([list("ACGT")] * k),
            )
            for n_seqs in [1, 2]:
                for length in [k, 10]:
                    for out in ["seq", "idx", "one_hot"]:
                        res = utils.random_sequences(n_seqs, length, freq_kmer, out=out)
                        if out == "one_hot":
                            assert res.shape == (n_seqs, length, 4)
                            assert res.dtype == bool
                        elif out == "seq":
                            assert res.shape == (n_seqs, length)
                            assert res.dtype == "<U1"
                        else:
                            assert res.shape == (n_seqs, length)
                            assert res.dtype == np.int8
                            if name == "repAC":
                                assert np.all(
                                    (res[..., :2] == np.array([0, 1]))
                                    | (res[..., :2] == np.array([1, 0]))
                                )
                                assert np.all(
                                    res[..., ::2] == res[..., [0]]
                                ) and np.all(res[..., 1::2] == res[..., [1]])


def test_nanpearson():
    arr1 = np.array([np.nan, 2, 3, 5, np.nan])
    arr2 = np.array([np.nan, 1, 4, 5, 3])
    arr3 = np.array([2, 3, 5, 1, 4])
    arr4 = np.array([3, 3, 5, 1, 2])
    assert np.allclose(utils.nanpearson(arr1, arr2), pearsonr(arr1[1:4], arr2[1:4])[0])
    assert np.allclose(
        utils.nanpearson(arr1[1:], arr2[1:]), pearsonr(arr1[1:4], arr2[1:4])[0]
    )
    assert np.allclose(
        utils.nanpearson(arr1[1:4], arr2[1:4]), pearsonr(arr1[1:4], arr2[1:4])[0]
    )
    assert np.allclose(
        utils.nanpearson(arr1[:4], arr2[:4]), pearsonr(arr1[1:4], arr2[1:4])[0]
    )
    assert np.allclose(utils.nanpearson(arr1, arr3), pearsonr(arr1[1:4], arr3[1:4])[0])
    assert np.allclose(
        utils.nanpearson(arr1[1:], arr3[1:]), pearsonr(arr1[1:4], arr3[1:4])[0]
    )
    assert np.allclose(
        utils.nanpearson(arr1[1:4], arr3[1:4]), pearsonr(arr1[1:4], arr3[1:4])[0]
    )
    assert np.allclose(
        utils.nanpearson(arr1[:4], arr3[:4]), pearsonr(arr1[1:4], arr3[1:4])[0]
    )
    assert np.allclose(utils.nanpearson(arr2, arr3), pearsonr(arr2[1:], arr3[1:])[0])
    assert np.allclose(
        utils.nanpearson(arr2[1:], arr3[1:]), pearsonr(arr2[1:], arr3[1:])[0]
    )
    assert np.allclose(utils.nanpearson(arr3, arr4), pearsonr(arr3, arr4)[0])
